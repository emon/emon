#!/bin/sh

TAB="        "
NEWLINE="`echo`"
    
DEFAULT_PATH_LIBEXEC_EMON="../src"
DEFAULT_DSP_CAPT="/dev/dsp"
DEFAULT_DSP_PLAY="/dev/dsp"
DEFAULT_DSP_RATE="8000"
DEFAULT_CODEC="l16"

PATH_LIBEXEC_EMON=${PATH_LIBEXEC_EMON-${DEFAULT_PATH_LIBEXEC_EMON}}
DSP_CAPT=${DSP_CAPT-${DEFAULT_DSP_CAPT}}
DSP_PLAY=${DSP_PLAY-${DEFAULT_DSP_PLAY}}
DSP_RATE=${DSP_RATE-${DEFAULT_DSP_RATE}}
CODEC=${CODEC-${DEFAULT_CODEC}}

usage () {
    echo ""
    echo "-- Audio device tester which process audio loopback by EMON --"
    echo "usage: $0 [-r recdev] [-p playdev] [-rate rate] [-c codec] "
    echo "options:"
    echo "    recdev       device for recording  [$DEFAULT_DSP_CAPT]"
    echo "    playdev      device for playing    [$DEFAULT_DSP_PLAY]"
    echo "    rate         sampling rate         [$DEFAULT_DSP_RATE]"
    echo "    codec        codec for voice stream[$DEFAULT_CODEC]"
    echo "        (l16        Liner 16bit 1ch)"
    echo "        (2chl16     Liner 16bit 2ch)"
    echo "        (pcmu       PCM-uLaw 1ch)"
    echo "        (2chpcmu    PCM-uLaw 2ch)"
    echo "        (dvi4       IMA-ADPCM 1ch)"
    echo ""
}

codec_set() {
    case "$1" in
        "l16")
		AUDIOCAPT_CODEC="l16";AUDIOCAPT_DSP_CH="1";
                AUDIOPLAY_CODEC="l16";AUDIOPLAY_DSP_CH="1";
		;;
        "2chl16")
		AUDIOCAPT_CODEC="l16";AUDIOCAPT_DSP_CH="2";
                AUDIOPLAY_CODEC="l16";AUDIOPLAY_DSP_CH="2";
		;;
        "pcmu")
		AUDIOCAPT_CODEC="pcmu";AUDIOCAPT_DSP_CH="1";
                AUDIOPLAY_CODEC="pcmu";AUDIOPLAY_DSP_CH="1";
		;;
        "2chpcmu")
		AUDIOCAPT_CODEC="pcmu";AUDIOCAPT_DSP_CH="2";
                AUDIOPLAY_CODEC="pcmu";AUDIOPLAY_DSP_CH="2";
		;;
        "dvi4")
		AUDIOCAPT_CODEC="dvi4";AUDIOCAPT_DSP_CH="1";
                AUDIOPLAY_CODEC="dvi4";AUDIOPLAY_DSP_CH="1";
		;;
        * )
		ERROR="${ERROR}${TAB}codec($1) is not supported.${NEWLINE}"
		;;
    esac
}

dsp_set(){
    AUDIOCAPT_DSP="$1"
    AUDIOPLAY_DSP="$2"
    if [ ! -r "$AUDIOCAPT_DSP" ];then
	ERROR="${ERROR}${TAB} cannot read from $AUDIOCAPT_DSP${NEWLINE}"
    fi
    if [ ! -w "$AUDIOPLAY_DSP" ];then
	ERROR="${ERROR}${TAB} cannot write to $AUDIOPLAY_DSP${NEWLINE}"
    fi
    if [ $AUDIOCAPT_DSP = $AUDIOPLAY_DSP ];then
	AUDIOCAPTPLAY_DSP="${AUDIOPLAY_DSP}";
    else
	AUDIOCAPTPLAY_DSP="";
    fi
}

   
rate_set(){
    EMON_CLOCK=${1-"-1"};
    FREQ_0=441;
    FREQ_1=400;
    FREQ_2=100;
    FREQ_3=25;
    FREQ_4=10;
    FREQ_5=${EMON_CLOCK};
    if [ ${EMON_CLOCK} -le 0 -o ${EMON_CLOCK} -ge 100000 ];then
	ERROR="${ERROR} sampling rate ($1) is invalid ${NEWLINE}"
    fi
    FREQ_CNT=0;
    while [ 1 ];do
	EMON_FREQ=`eval echo -n '${FREQ_'${FREQ_CNT}'}'`
	TMP=`expr ${EMON_CLOCK} / $EMON_FREQ`;
	TMP=`expr ${TMP} \* $EMON_FREQ`;
	if [ $TMP -eq $EMON_CLOCK ];then
	    break;
	fi
	FREQ_CNT=`expr ${FREQ_CNT} + 1`;
    done
    AUDIOCAPT_DSP_RATE=${EMON_CLOCK};
    AUDIOPLAY_DSP_RATE=${EMON_CLOCK};
}



while [ $# -gt 0 ];do
#DEBUG#    echo "DEBUG:opt == \"$1\""
    case "$1" in
    -r ) #capt dev
	shift;
	DSP_CAPT=$1;
	shift;
	;;
    -p ) #play dev
	shift;
	DSP_PLAY=$1
	shift;
	;;
    -rate )
	shift;
	DSP_RATE=$1
	shift;
	;;
    -c )
	shift;
	CODEC=$1
	shift;
	;;
    -h )
	usage;
	exit 0;
	;;
    *  )
	break;
	;;
    esac
done

#DEBUG# echo "DEBUG:opt \"$1\" \"$2\""

if [ $# != 0 ] ;then
    echo "ERROR: unacceptable arg passed."
    usage;
    exit 1;
fi

if [ $# = 2 ];then
    PORT=$2
fi
ADDR=$1;

#DEBUG#  echo "DEBUG: addr=$ADDR port=$PORT"

ERROR=""
codec_set $CODEC
rate_set  $DSP_RATE
dsp_set   $DSP_CAPT $DSP_PLAY 

if [ "x${ERROR}" != "x" ];then
    echo "ERROR:"
    echo "$ERROR"
    exit 1
fi

#DEBUG#  echo "NO ERROR, $DSP_CAPT $DSP_PLAY $CODEC $ADDR $PORT"

PAD2CAPT="/tmp/dtmftest.$$"
echo "= pipeline start ="
echo "mkfifo ${PAD2CAPT}"
mkfifo ${PAD2CAPT}

trap "rm ${PAD2CAPT}; trap '' 0; exit 0" 0 1 2 15

#call
export PATH="${PATH_LIBEXEC_EMON}:${PATH}"
#for recording voice
AUDIOCAPT="audiocapt -C${EMON_CLOCK} -R${EMON_FREQ} -f${AUDIOPLAY_CODEC} -c1 -r${AUDIOPLAY_DSP_RATE} -m${AUDIOCAPT_MARKER} -p ${PAD2CAPT}"

export PATH="${PATH_LIBEXEC_EMON}:${PATH}"
#for recording voice
AUDIOCAPT="audiocapt -C${EMON_CLOCK} -R${EMON_FREQ} -f${AUDIOPLAY_CODEC} -c${AUDIOCAPT_DSP_CH} -r${AUDIOPLAY_DSP_RATE} -p ${PAD2CAPT}"

#for playing voice
AUDIOPLAY="audioplay -C${EMON_CLOCK} -R${EMON_FREQ} -f${AUDIOPLAY_CODEC} -c${AUDIOPLAY_DSP_CH} -r${AUDIOPLAY_DSP_RATE}"

#common ntspcall arg
if [ ! ${AUDIOCAPTPLAY_DSP} ];then
    PIPELINE="${AUDIOCAPT} -d${AUDIOCAPT_DSP} | ${AUDIOPLAY} -d${AUDIOPLAY_DSP}"
    echo ${PIPELINE}
    ${AUDIOCAPT} -d${AUDIOCAPT_DSP} </dev/null | ${AUDIOPLAY} -d${AUDIOPLAY_DSP} &
else
    echo "audiocaptplay -t -f1 -c${AUDIOCAPT_DSP_CH} -d${AUDIOCAPT_DSP} -- ${AUDIOPLAY} -- ${AUDIOCAPT}"
    audiocaptplay -t -f1 -c${AUDIOCAPT_DSP_CH} -d${AUDIOCAPT_DSP} -- ${AUDIOPLAY} -- ${AUDIOCAPT} &
fi
AUDIOCAPT_PID=$!;
trap "rm ${PAD2CAPT};kill ${AUDIOCAPT_PID}; trap '' 0; exit 0" 0 1 2 15
echo "./dtmfpad > ${PAD2CAPT}"
echo "= pipeline end ="

sh dtmfpad > ${PAD2CAPT} 
echo "stop dtmfpad."

kill ${AUDIOCAPT_PID}
rm ${PAD2CAPT}
